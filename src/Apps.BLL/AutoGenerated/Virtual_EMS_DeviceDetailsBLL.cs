//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Unity.Attributes;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using LinqToExcel;
using System.IO;
using System.Text;
using Apps.IDAL.EMS;
using Apps.Models.EMS;
using Apps.IBLL.EMS;
namespace Apps.BLL.EMS
{
	public partial class EMS_DeviceDetailsBLL: Virtual_EMS_DeviceDetailsBLL,IEMS_DeviceDetailsBLL
	{
        

	}
	public class Virtual_EMS_DeviceDetailsBLL
	{
        [Dependency]
        public IEMS_DeviceDetailsRepository m_Rep { get; set; }

		public virtual List<EMS_DeviceDetailsModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<EMS_DeviceDetails> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								
								
								
								a=>a.Code.Contains(queryStr)
								|| a.Name.Contains(queryStr)
								|| a.Model.Contains(queryStr)
								|| a.OEM.Contains(queryStr)
								
								
								|| a.Remark.Contains(queryStr)
								
								|| a.CreateUser.Contains(queryStr)
								
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }

		public virtual List<EMS_DeviceDetailsModel> GetListByUserId(ref GridPager pager, string userId,string queryStr)
		{
			return new List<EMS_DeviceDetailsModel>();
		}
		
		public virtual List<EMS_DeviceDetailsModel> GetListByParentId(ref GridPager pager, string queryStr,object parentId)
        {
			return new List<EMS_DeviceDetailsModel>();
		}

        public virtual List<EMS_DeviceDetailsModel> CreateModelList(ref IQueryable<EMS_DeviceDetails> queryData)
        {

            List<EMS_DeviceDetailsModel> modelList = (from r in queryData
                                              select new EMS_DeviceDetailsModel
                                              {
													Id = r.Id,
													AreaId = r.AreaId,
													ParentID = r.ParentID,
													Code = r.Code,
													Name = r.Name,
													Model = r.Model,
													OEM = r.OEM,
													Type = r.Type,
													State = r.State,
													Remark = r.Remark,
													locking = r.locking,
													CreateUser = r.CreateUser,
													CreateTime = r.CreateTime,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, EMS_DeviceDetailsModel model)
        {
            try
            {
                EMS_DeviceDetails entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new EMS_DeviceDetails();
               				entity.Id = model.Id;
				entity.AreaId = model.AreaId;
				entity.ParentID = model.ParentID;
				entity.Code = model.Code;
				entity.Name = model.Name;
				entity.Model = model.Model;
				entity.OEM = model.OEM;
				entity.Type = model.Type;
				entity.State = model.State;
				entity.Remark = model.Remark;
				entity.locking = model.locking;
				entity.CreateUser = model.CreateUser;
				entity.CreateTime = model.CreateTime;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, object id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, object[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, EMS_DeviceDetailsModel model)
        {
            try
            {
                EMS_DeviceDetails entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.Id = model.Id;
				entity.AreaId = model.AreaId;
				entity.ParentID = model.ParentID;
				entity.Code = model.Code;
				entity.Name = model.Name;
				entity.Model = model.Model;
				entity.OEM = model.OEM;
				entity.Type = model.Type;
				entity.State = model.State;
				entity.Remark = model.Remark;
				entity.locking = model.locking;
				entity.CreateUser = model.CreateUser;
				entity.CreateTime = model.CreateTime;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual EMS_DeviceDetailsModel GetById(object id)
        {
            if (IsExists(id))
            {
                EMS_DeviceDetails entity = m_Rep.GetById(id);
                EMS_DeviceDetailsModel model = new EMS_DeviceDetailsModel();
                              				model.Id = entity.Id;
				model.AreaId = entity.AreaId;
				model.ParentID = entity.ParentID;
				model.Code = entity.Code;
				model.Name = entity.Name;
				model.Model = entity.Model;
				model.OEM = entity.OEM;
				model.Type = entity.Type;
				model.State = entity.State;
				model.Remark = entity.Remark;
				model.locking = entity.locking;
				model.CreateUser = entity.CreateUser;
				model.CreateTime = entity.CreateTime;
 
                return model;
            }
            else
            {
                return null;
            }
        }


		 /// <summary>
        /// 校验Excel数据,这个方法一般用于重写校验逻辑
        /// </summary>
        public virtual bool CheckImportData(string fileName, List<EMS_DeviceDetailsModel> list,ref ValidationErrors errors )
        {
          
            var targetFile = new FileInfo(fileName);

            if (!targetFile.Exists)
            {

                errors.Add("导入的数据文件不存在");
                return false;
            }

            var excelFile = new ExcelQueryFactory(fileName);

            //对应列头
			 				 excelFile.AddMapping<EMS_DeviceDetailsModel>(x => x.AreaId, "AreaId");
				 excelFile.AddMapping<EMS_DeviceDetailsModel>(x => x.ParentID, "ParentID");
				 excelFile.AddMapping<EMS_DeviceDetailsModel>(x => x.Code, "Code");
				 excelFile.AddMapping<EMS_DeviceDetailsModel>(x => x.Name, "Name");
				 excelFile.AddMapping<EMS_DeviceDetailsModel>(x => x.Model, "Model");
				 excelFile.AddMapping<EMS_DeviceDetailsModel>(x => x.OEM, "OEM");
				 excelFile.AddMapping<EMS_DeviceDetailsModel>(x => x.Type, "Type");
				 excelFile.AddMapping<EMS_DeviceDetailsModel>(x => x.State, "State");
				 excelFile.AddMapping<EMS_DeviceDetailsModel>(x => x.Remark, "Remark");
				 excelFile.AddMapping<EMS_DeviceDetailsModel>(x => x.locking, "locking");
				 excelFile.AddMapping<EMS_DeviceDetailsModel>(x => x.CreateUser, "CreateUser");
				 excelFile.AddMapping<EMS_DeviceDetailsModel>(x => x.CreateTime, "CreateTime");
 
            //SheetName
            var excelContent = excelFile.Worksheet<EMS_DeviceDetailsModel>(0);
            int rowIndex = 1;
            //检查数据正确性
            foreach (var row in excelContent)
            {
                var errorMessage = new StringBuilder();
                var entity = new EMS_DeviceDetailsModel();
						 				  entity.Id = row.Id;
				  entity.AreaId = row.AreaId;
				  entity.ParentID = row.ParentID;
				  entity.Code = row.Code;
				  entity.Name = row.Name;
				  entity.Model = row.Model;
				  entity.OEM = row.OEM;
				  entity.Type = row.Type;
				  entity.State = row.State;
				  entity.Remark = row.Remark;
				  entity.locking = row.locking;
				  entity.CreateUser = row.CreateUser;
				  entity.CreateTime = row.CreateTime;
 
                //=============================================================================
                if (errorMessage.Length > 0)
                {
                    errors.Add(string.Format(
                        "第 {0} 列发现错误：{1}{2}",
                        rowIndex,
                        errorMessage,
                        "<br/>"));
                }
                list.Add(entity);
                rowIndex += 1;
            }
            if (errors.Count > 0)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        public virtual void SaveImportData(IEnumerable<EMS_DeviceDetailsModel> list)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    foreach (var model in list)
                    {
                        EMS_DeviceDetails entity = new EMS_DeviceDetails();
                       						entity.Id = 0;
						entity.AreaId = model.AreaId;
						entity.ParentID = model.ParentID;
						entity.Code = model.Code;
						entity.Name = model.Name;
						entity.Model = model.Model;
						entity.OEM = model.OEM;
						entity.Type = model.Type;
						entity.State = model.State;
						entity.Remark = model.Remark;
						entity.locking = model.locking;
						entity.CreateUser = model.CreateUser;
						entity.CreateTime = ResultHelper.NowTime;
 
                        db.EMS_DeviceDetails.Add(entity);
                    }
                    db.SaveChanges();
                }
            }
            catch(Exception ex)
            {
                throw;
            }
        }
		public virtual bool Check(ref ValidationErrors errors, object id,int flag)
        {
			return true;
		}

        public virtual bool IsExists(object id)
        {
            return m_Rep.IsExist(id);
        }
		
		public void Dispose()
        { 
            
        }

	}
}
