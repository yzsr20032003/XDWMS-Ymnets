//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Unity.Attributes;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using LinqToExcel;
using System.IO;
using System.Text;
using Apps.IDAL.Flow;
using Apps.Models.Flow;
using Apps.IBLL.Flow;
namespace Apps.BLL.Flow
{
	public partial class Flow_ExternalBLL: Virtual_Flow_ExternalBLL,IFlow_ExternalBLL
	{
        

	}
	public class Virtual_Flow_ExternalBLL
	{
        [Dependency]
        public IFlow_ExternalRepository m_Rep { get; set; }

		public virtual List<Flow_ExternalModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<Flow_External> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								a=>a.Id.Contains(queryStr)
								|| a.Title.Contains(queryStr)
								|| a.Remark.Contains(queryStr)
								|| a.Photo.Contains(queryStr)
								|| a.SysUserId.Contains(queryStr)
								|| a.TrueName.Contains(queryStr)
								
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }

		public virtual List<Flow_ExternalModel> GetListByUserId(ref GridPager pager, string userId,string queryStr)
		{
			return new List<Flow_ExternalModel>();
		}
		
		public virtual List<Flow_ExternalModel> GetListByParentId(ref GridPager pager, string queryStr,object parentId)
        {
			return new List<Flow_ExternalModel>();
		}

        public virtual List<Flow_ExternalModel> CreateModelList(ref IQueryable<Flow_External> queryData)
        {

            List<Flow_ExternalModel> modelList = (from r in queryData
                                              select new Flow_ExternalModel
                                              {
													Id = r.Id,
													Title = r.Title,
													Remark = r.Remark,
													Photo = r.Photo,
													SysUserId = r.SysUserId,
													TrueName = r.TrueName,
													CreateTime = r.CreateTime,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, Flow_ExternalModel model)
        {
            try
            {
                Flow_External entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new Flow_External();
               				entity.Id = model.Id;
				entity.Title = model.Title;
				entity.Remark = model.Remark;
				entity.Photo = model.Photo;
				entity.SysUserId = model.SysUserId;
				entity.TrueName = model.TrueName;
				entity.CreateTime = model.CreateTime;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, object id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, object[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, Flow_ExternalModel model)
        {
            try
            {
                Flow_External entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.Id = model.Id;
				entity.Title = model.Title;
				entity.Remark = model.Remark;
				entity.Photo = model.Photo;
				entity.SysUserId = model.SysUserId;
				entity.TrueName = model.TrueName;
				entity.CreateTime = model.CreateTime;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual Flow_ExternalModel GetById(object id)
        {
            if (IsExists(id))
            {
                Flow_External entity = m_Rep.GetById(id);
                Flow_ExternalModel model = new Flow_ExternalModel();
                              				model.Id = entity.Id;
				model.Title = entity.Title;
				model.Remark = entity.Remark;
				model.Photo = entity.Photo;
				model.SysUserId = entity.SysUserId;
				model.TrueName = entity.TrueName;
				model.CreateTime = entity.CreateTime;
 
                return model;
            }
            else
            {
                return null;
            }
        }


		 /// <summary>
        /// 校验Excel数据,这个方法一般用于重写校验逻辑
        /// </summary>
        public virtual bool CheckImportData(string fileName, List<Flow_ExternalModel> list,ref ValidationErrors errors )
        {
          
            var targetFile = new FileInfo(fileName);

            if (!targetFile.Exists)
            {

                errors.Add("导入的数据文件不存在");
                return false;
            }

            var excelFile = new ExcelQueryFactory(fileName);

            //对应列头
			 				 excelFile.AddMapping<Flow_ExternalModel>(x => x.Title, "Title");
				 excelFile.AddMapping<Flow_ExternalModel>(x => x.Remark, "Remark");
				 excelFile.AddMapping<Flow_ExternalModel>(x => x.Photo, "Photo");
				 excelFile.AddMapping<Flow_ExternalModel>(x => x.SysUserId, "SysUserId");
				 excelFile.AddMapping<Flow_ExternalModel>(x => x.TrueName, "TrueName");
				 excelFile.AddMapping<Flow_ExternalModel>(x => x.CreateTime, "CreateTime");
 
            //SheetName
            var excelContent = excelFile.Worksheet<Flow_ExternalModel>(0);
            int rowIndex = 1;
            //检查数据正确性
            foreach (var row in excelContent)
            {
                var errorMessage = new StringBuilder();
                var entity = new Flow_ExternalModel();
						 				  entity.Id = row.Id;
				  entity.Title = row.Title;
				  entity.Remark = row.Remark;
				  entity.Photo = row.Photo;
				  entity.SysUserId = row.SysUserId;
				  entity.TrueName = row.TrueName;
				  entity.CreateTime = row.CreateTime;
 
                //=============================================================================
                if (errorMessage.Length > 0)
                {
                    errors.Add(string.Format(
                        "第 {0} 列发现错误：{1}{2}",
                        rowIndex,
                        errorMessage,
                        "<br/>"));
                }
                list.Add(entity);
                rowIndex += 1;
            }
            if (errors.Count > 0)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        public virtual void SaveImportData(IEnumerable<Flow_ExternalModel> list)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    foreach (var model in list)
                    {
                        Flow_External entity = new Flow_External();
                       						entity.Id = ResultHelper.NewId;
						entity.Title = model.Title;
						entity.Remark = model.Remark;
						entity.Photo = model.Photo;
						entity.SysUserId = model.SysUserId;
						entity.TrueName = model.TrueName;
						entity.CreateTime = ResultHelper.NowTime;
 
                        db.Flow_External.Add(entity);
                    }
                    db.SaveChanges();
                }
            }
            catch(Exception ex)
            {
                throw;
            }
        }
		public virtual bool Check(ref ValidationErrors errors, object id,int flag)
        {
			return true;
		}

        public virtual bool IsExists(object id)
        {
            return m_Rep.IsExist(id);
        }
		
		public void Dispose()
        { 
            
        }

	}
}
