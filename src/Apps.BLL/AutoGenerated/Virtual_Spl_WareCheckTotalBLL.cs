//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Unity.Attributes;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using LinqToExcel;
using System.IO;
using System.Text;
using Apps.IDAL.Spl;
using Apps.Models.Spl;
using Apps.IBLL.Spl;
namespace Apps.BLL.Spl
{
	public partial class Spl_WareCheckTotalBLL: Virtual_Spl_WareCheckTotalBLL,ISpl_WareCheckTotalBLL
	{
        

	}
	public class Virtual_Spl_WareCheckTotalBLL
	{
        [Dependency]
        public ISpl_WareCheckTotalRepository m_Rep { get; set; }

		public virtual List<Spl_WareCheckTotalModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<Spl_WareCheckTotal> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								a=>a.Id.Contains(queryStr)
								|| a.WareDetailsId.Contains(queryStr)
								|| a.WarehouseId.Contains(queryStr)
								|| a.Remark.Contains(queryStr)
								
								
								
								
								|| a.Creater.Contains(queryStr)
								|| a.Checker.Contains(queryStr)
								
								
								
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }

			
		public virtual List<Spl_WareCheckTotalModel> GetListByUserId(ref GridPager pager,string userId, string queryStr)
        {

            IQueryable<Spl_WareCheckTotal> queryData = m_Rep.GetList(a=>a.Creater==userId);
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = queryData.Where(
								a=>a.Id.Contains(queryStr)
								|| a.WareDetailsId.Contains(queryStr)
								|| a.WarehouseId.Contains(queryStr)
								|| a.Remark.Contains(queryStr)
								
								
								
								
								|| a.Creater.Contains(queryStr)
								|| a.Checker.Contains(queryStr)
								
								
								
								);
            }
          
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }
		
		public virtual List<Spl_WareCheckTotalModel> GetListByParentId(ref GridPager pager, string queryStr,object parentId)
        {
			return new List<Spl_WareCheckTotalModel>();
		}

        public virtual List<Spl_WareCheckTotalModel> CreateModelList(ref IQueryable<Spl_WareCheckTotal> queryData)
        {

            List<Spl_WareCheckTotalModel> modelList = (from r in queryData
                                              select new Spl_WareCheckTotalModel
                                              {
													Id = r.Id,
													WareDetailsId = r.WareDetailsId,
													WarehouseId = r.WarehouseId,
													Remark = r.Remark,
													DiffQuantity = r.DiffQuantity,
													Quantity = r.Quantity,
													Price = r.Price,
													State = r.State,
													Creater = r.Creater,
													Checker = r.Checker,
													CheckTime = r.CheckTime,
													Confirmation = r.Confirmation,
													CreateTime = r.CreateTime,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, Spl_WareCheckTotalModel model)
        {
            try
            {
                Spl_WareCheckTotal entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new Spl_WareCheckTotal();
               				entity.Id = model.Id;
				entity.WareDetailsId = model.WareDetailsId;
				entity.WarehouseId = model.WarehouseId;
				entity.Remark = model.Remark;
				entity.DiffQuantity = model.DiffQuantity;
				entity.Quantity = model.Quantity;
				entity.Price = model.Price;
				entity.State = model.State;
				entity.Creater = model.Creater;
				entity.Checker = model.Checker;
				entity.CheckTime = model.CheckTime;
				entity.Confirmation = model.Confirmation;
				entity.CreateTime = model.CreateTime;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, object id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, object[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, Spl_WareCheckTotalModel model)
        {
            try
            {
                Spl_WareCheckTotal entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.Id = model.Id;
				entity.WareDetailsId = model.WareDetailsId;
				entity.WarehouseId = model.WarehouseId;
				entity.Remark = model.Remark;
				entity.DiffQuantity = model.DiffQuantity;
				entity.Quantity = model.Quantity;
				entity.Price = model.Price;
				entity.State = model.State;
				entity.Creater = model.Creater;
				entity.Checker = model.Checker;
				entity.CheckTime = model.CheckTime;
				entity.Confirmation = model.Confirmation;
				entity.CreateTime = model.CreateTime;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual Spl_WareCheckTotalModel GetById(object id)
        {
            if (IsExists(id))
            {
                Spl_WareCheckTotal entity = m_Rep.GetById(id);
                Spl_WareCheckTotalModel model = new Spl_WareCheckTotalModel();
                              				model.Id = entity.Id;
				model.WareDetailsId = entity.WareDetailsId;
				model.WarehouseId = entity.WarehouseId;
				model.Remark = entity.Remark;
				model.DiffQuantity = entity.DiffQuantity;
				model.Quantity = entity.Quantity;
				model.Price = entity.Price;
				model.State = entity.State;
				model.Creater = entity.Creater;
				model.Checker = entity.Checker;
				model.CheckTime = entity.CheckTime;
				model.Confirmation = entity.Confirmation;
				model.CreateTime = entity.CreateTime;
 
                return model;
            }
            else
            {
                return null;
            }
        }


		 /// <summary>
        /// 校验Excel数据,这个方法一般用于重写校验逻辑
        /// </summary>
        public virtual bool CheckImportData(string fileName, List<Spl_WareCheckTotalModel> list,ref ValidationErrors errors )
        {
          
            var targetFile = new FileInfo(fileName);

            if (!targetFile.Exists)
            {

                errors.Add("导入的数据文件不存在");
                return false;
            }

            var excelFile = new ExcelQueryFactory(fileName);

            //对应列头
			 				 excelFile.AddMapping<Spl_WareCheckTotalModel>(x => x.WareDetailsId, "WareDetailsId");
				 excelFile.AddMapping<Spl_WareCheckTotalModel>(x => x.WarehouseId, "WarehouseId");
				 excelFile.AddMapping<Spl_WareCheckTotalModel>(x => x.Remark, "Remark");
				 excelFile.AddMapping<Spl_WareCheckTotalModel>(x => x.DiffQuantity, "DiffQuantity");
				 excelFile.AddMapping<Spl_WareCheckTotalModel>(x => x.Quantity, "Quantity");
				 excelFile.AddMapping<Spl_WareCheckTotalModel>(x => x.Price, "Price");
				 excelFile.AddMapping<Spl_WareCheckTotalModel>(x => x.State, "State");
				 excelFile.AddMapping<Spl_WareCheckTotalModel>(x => x.Creater, "Creater");
				 excelFile.AddMapping<Spl_WareCheckTotalModel>(x => x.Checker, "Checker");
				 excelFile.AddMapping<Spl_WareCheckTotalModel>(x => x.CheckTime, "CheckTime");
				 excelFile.AddMapping<Spl_WareCheckTotalModel>(x => x.Confirmation, "Confirmation");
				 excelFile.AddMapping<Spl_WareCheckTotalModel>(x => x.CreateTime, "CreateTime");
 
            //SheetName
            var excelContent = excelFile.Worksheet<Spl_WareCheckTotalModel>(0);
            int rowIndex = 1;
            //检查数据正确性
            foreach (var row in excelContent)
            {
                var errorMessage = new StringBuilder();
                var entity = new Spl_WareCheckTotalModel();
						 				  entity.Id = row.Id;
				  entity.WareDetailsId = row.WareDetailsId;
				  entity.WarehouseId = row.WarehouseId;
				  entity.Remark = row.Remark;
				  entity.DiffQuantity = row.DiffQuantity;
				  entity.Quantity = row.Quantity;
				  entity.Price = row.Price;
				  entity.State = row.State;
				  entity.Creater = row.Creater;
				  entity.Checker = row.Checker;
				  entity.CheckTime = row.CheckTime;
				  entity.Confirmation = row.Confirmation;
				  entity.CreateTime = row.CreateTime;
 
                //=============================================================================
                if (errorMessage.Length > 0)
                {
                    errors.Add(string.Format(
                        "第 {0} 列发现错误：{1}{2}",
                        rowIndex,
                        errorMessage,
                        "<br/>"));
                }
                list.Add(entity);
                rowIndex += 1;
            }
            if (errors.Count > 0)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        public virtual void SaveImportData(IEnumerable<Spl_WareCheckTotalModel> list)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    foreach (var model in list)
                    {
                        Spl_WareCheckTotal entity = new Spl_WareCheckTotal();
                       						entity.Id = ResultHelper.NewId;
						entity.WareDetailsId = model.WareDetailsId;
						entity.WarehouseId = model.WarehouseId;
						entity.Remark = model.Remark;
						entity.DiffQuantity = model.DiffQuantity;
						entity.Quantity = model.Quantity;
						entity.Price = model.Price;
						entity.State = model.State;
						entity.Creater = model.Creater;
						entity.Checker = model.Checker;
						entity.CheckTime = model.CheckTime;
						entity.Confirmation = model.Confirmation;
						entity.CreateTime = ResultHelper.NowTime;
 
                        db.Spl_WareCheckTotal.Add(entity);
                    }
                    db.SaveChanges();
                }
            }
            catch(Exception ex)
            {
                throw;
            }
        }
		public virtual bool Check(ref ValidationErrors errors, object id,int flag)
        {
			return true;
		}

        public virtual bool IsExists(object id)
        {
            return m_Rep.IsExist(id);
        }
		
		public void Dispose()
        { 
            
        }

	}
}
