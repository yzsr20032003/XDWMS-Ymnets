//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Unity.Attributes;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using LinqToExcel;
using System.IO;
using System.Text;
using Apps.IDAL.Spl;
using Apps.Models.Spl;
using Apps.IBLL.Spl;
namespace Apps.BLL.Spl
{
	public partial class Spl_WareDetailsBLL: Virtual_Spl_WareDetailsBLL,ISpl_WareDetailsBLL
	{
        

	}
	public class Virtual_Spl_WareDetailsBLL
	{
        [Dependency]
        public ISpl_WareDetailsRepository m_Rep { get; set; }

		public virtual List<Spl_WareDetailsModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<Spl_WareDetails> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								a=>a.Id.Contains(queryStr)
								|| a.Name.Contains(queryStr)
								|| a.Code.Contains(queryStr)
								|| a.BarCode.Contains(queryStr)
								|| a.WareCategoryId.Contains(queryStr)
								|| a.Unit.Contains(queryStr)
								|| a.Lable.Contains(queryStr)
								
								
								
								|| a.Remark.Contains(queryStr)
								|| a.Vender.Contains(queryStr)
								|| a.Brand.Contains(queryStr)
								|| a.Color.Contains(queryStr)
								|| a.Material.Contains(queryStr)
								|| a.Size.Contains(queryStr)
								|| a.Weight.Contains(queryStr)
								|| a.ComeFrom.Contains(queryStr)
								
								
								
								
								
								
								
								
								|| a.Photo1.Contains(queryStr)
								|| a.Photo2.Contains(queryStr)
								|| a.Photo3.Contains(queryStr)
								|| a.Photo4.Contains(queryStr)
								|| a.Photo5.Contains(queryStr)
								
								
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }

		public virtual List<Spl_WareDetailsModel> GetListByUserId(ref GridPager pager, string userId,string queryStr)
		{
			return new List<Spl_WareDetailsModel>();
		}
		
		public virtual List<Spl_WareDetailsModel> GetListByParentId(ref GridPager pager, string queryStr,object parentId)
        {
			return new List<Spl_WareDetailsModel>();
		}

        public virtual List<Spl_WareDetailsModel> CreateModelList(ref IQueryable<Spl_WareDetails> queryData)
        {

            List<Spl_WareDetailsModel> modelList = (from r in queryData
                                              select new Spl_WareDetailsModel
                                              {
													Id = r.Id,
													Name = r.Name,
													Code = r.Code,
													BarCode = r.BarCode,
													WareCategoryId = r.WareCategoryId,
													Unit = r.Unit,
													Lable = r.Lable,
													BuyPrice = r.BuyPrice,
													SalePrice = r.SalePrice,
													RetailPrice = r.RetailPrice,
													Remark = r.Remark,
													Vender = r.Vender,
													Brand = r.Brand,
													Color = r.Color,
													Material = r.Material,
													Size = r.Size,
													Weight = r.Weight,
													ComeFrom = r.ComeFrom,
													UpperLimit = r.UpperLimit,
													LowerLimit = r.LowerLimit,
													PrimeCost = r.PrimeCost,
													Price1 = r.Price1,
													Price2 = r.Price2,
													Price3 = r.Price3,
													Price4 = r.Price4,
													Price5 = r.Price5,
													Photo1 = r.Photo1,
													Photo2 = r.Photo2,
													Photo3 = r.Photo3,
													Photo4 = r.Photo4,
													Photo5 = r.Photo5,
													Enable = r.Enable,
													CreateTime = r.CreateTime,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, Spl_WareDetailsModel model)
        {
            try
            {
                Spl_WareDetails entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new Spl_WareDetails();
               				entity.Id = model.Id;
				entity.Name = model.Name;
				entity.Code = model.Code;
				entity.BarCode = model.BarCode;
				entity.WareCategoryId = model.WareCategoryId;
				entity.Unit = model.Unit;
				entity.Lable = model.Lable;
				entity.BuyPrice = model.BuyPrice;
				entity.SalePrice = model.SalePrice;
				entity.RetailPrice = model.RetailPrice;
				entity.Remark = model.Remark;
				entity.Vender = model.Vender;
				entity.Brand = model.Brand;
				entity.Color = model.Color;
				entity.Material = model.Material;
				entity.Size = model.Size;
				entity.Weight = model.Weight;
				entity.ComeFrom = model.ComeFrom;
				entity.UpperLimit = model.UpperLimit;
				entity.LowerLimit = model.LowerLimit;
				entity.PrimeCost = model.PrimeCost;
				entity.Price1 = model.Price1;
				entity.Price2 = model.Price2;
				entity.Price3 = model.Price3;
				entity.Price4 = model.Price4;
				entity.Price5 = model.Price5;
				entity.Photo1 = model.Photo1;
				entity.Photo2 = model.Photo2;
				entity.Photo3 = model.Photo3;
				entity.Photo4 = model.Photo4;
				entity.Photo5 = model.Photo5;
				entity.Enable = model.Enable;
				entity.CreateTime = model.CreateTime;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, object id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, object[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, Spl_WareDetailsModel model)
        {
            try
            {
                Spl_WareDetails entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.Id = model.Id;
				entity.Name = model.Name;
				entity.Code = model.Code;
				entity.BarCode = model.BarCode;
				entity.WareCategoryId = model.WareCategoryId;
				entity.Unit = model.Unit;
				entity.Lable = model.Lable;
				entity.BuyPrice = model.BuyPrice;
				entity.SalePrice = model.SalePrice;
				entity.RetailPrice = model.RetailPrice;
				entity.Remark = model.Remark;
				entity.Vender = model.Vender;
				entity.Brand = model.Brand;
				entity.Color = model.Color;
				entity.Material = model.Material;
				entity.Size = model.Size;
				entity.Weight = model.Weight;
				entity.ComeFrom = model.ComeFrom;
				entity.UpperLimit = model.UpperLimit;
				entity.LowerLimit = model.LowerLimit;
				entity.PrimeCost = model.PrimeCost;
				entity.Price1 = model.Price1;
				entity.Price2 = model.Price2;
				entity.Price3 = model.Price3;
				entity.Price4 = model.Price4;
				entity.Price5 = model.Price5;
				entity.Photo1 = model.Photo1;
				entity.Photo2 = model.Photo2;
				entity.Photo3 = model.Photo3;
				entity.Photo4 = model.Photo4;
				entity.Photo5 = model.Photo5;
				entity.Enable = model.Enable;
				entity.CreateTime = model.CreateTime;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual Spl_WareDetailsModel GetById(object id)
        {
            if (IsExists(id))
            {
                Spl_WareDetails entity = m_Rep.GetById(id);
                Spl_WareDetailsModel model = new Spl_WareDetailsModel();
                              				model.Id = entity.Id;
				model.Name = entity.Name;
				model.Code = entity.Code;
				model.BarCode = entity.BarCode;
				model.WareCategoryId = entity.WareCategoryId;
				model.Unit = entity.Unit;
				model.Lable = entity.Lable;
				model.BuyPrice = entity.BuyPrice;
				model.SalePrice = entity.SalePrice;
				model.RetailPrice = entity.RetailPrice;
				model.Remark = entity.Remark;
				model.Vender = entity.Vender;
				model.Brand = entity.Brand;
				model.Color = entity.Color;
				model.Material = entity.Material;
				model.Size = entity.Size;
				model.Weight = entity.Weight;
				model.ComeFrom = entity.ComeFrom;
				model.UpperLimit = entity.UpperLimit;
				model.LowerLimit = entity.LowerLimit;
				model.PrimeCost = entity.PrimeCost;
				model.Price1 = entity.Price1;
				model.Price2 = entity.Price2;
				model.Price3 = entity.Price3;
				model.Price4 = entity.Price4;
				model.Price5 = entity.Price5;
				model.Photo1 = entity.Photo1;
				model.Photo2 = entity.Photo2;
				model.Photo3 = entity.Photo3;
				model.Photo4 = entity.Photo4;
				model.Photo5 = entity.Photo5;
				model.Enable = entity.Enable;
				model.CreateTime = entity.CreateTime;
 
                return model;
            }
            else
            {
                return null;
            }
        }


		 /// <summary>
        /// 校验Excel数据,这个方法一般用于重写校验逻辑
        /// </summary>
        public virtual bool CheckImportData(string fileName, List<Spl_WareDetailsModel> list,ref ValidationErrors errors )
        {
          
            var targetFile = new FileInfo(fileName);

            if (!targetFile.Exists)
            {

                errors.Add("导入的数据文件不存在");
                return false;
            }

            var excelFile = new ExcelQueryFactory(fileName);

            //对应列头
			 				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Name, "Name");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Code, "Code");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.BarCode, "BarCode");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.WareCategoryId, "WareCategoryId");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Unit, "Unit");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Lable, "Lable");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.BuyPrice, "BuyPrice");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.SalePrice, "SalePrice");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.RetailPrice, "RetailPrice");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Remark, "Remark");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Vender, "Vender");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Brand, "Brand");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Color, "Color");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Material, "Material");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Size, "Size");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Weight, "Weight");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.ComeFrom, "ComeFrom");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.UpperLimit, "UpperLimit");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.LowerLimit, "LowerLimit");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.PrimeCost, "PrimeCost");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Price1, "Price1");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Price2, "Price2");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Price3, "Price3");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Price4, "Price4");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Price5, "Price5");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Photo1, "Photo1");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Photo2, "Photo2");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Photo3, "Photo3");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Photo4, "Photo4");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Photo5, "Photo5");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.Enable, "Enable");
				 excelFile.AddMapping<Spl_WareDetailsModel>(x => x.CreateTime, "CreateTime");
 
            //SheetName
            var excelContent = excelFile.Worksheet<Spl_WareDetailsModel>(0);
            int rowIndex = 1;
            //检查数据正确性
            foreach (var row in excelContent)
            {
                var errorMessage = new StringBuilder();
                var entity = new Spl_WareDetailsModel();
						 				  entity.Id = row.Id;
				  entity.Name = row.Name;
				  entity.Code = row.Code;
				  entity.BarCode = row.BarCode;
				  entity.WareCategoryId = row.WareCategoryId;
				  entity.Unit = row.Unit;
				  entity.Lable = row.Lable;
				  entity.BuyPrice = row.BuyPrice;
				  entity.SalePrice = row.SalePrice;
				  entity.RetailPrice = row.RetailPrice;
				  entity.Remark = row.Remark;
				  entity.Vender = row.Vender;
				  entity.Brand = row.Brand;
				  entity.Color = row.Color;
				  entity.Material = row.Material;
				  entity.Size = row.Size;
				  entity.Weight = row.Weight;
				  entity.ComeFrom = row.ComeFrom;
				  entity.UpperLimit = row.UpperLimit;
				  entity.LowerLimit = row.LowerLimit;
				  entity.PrimeCost = row.PrimeCost;
				  entity.Price1 = row.Price1;
				  entity.Price2 = row.Price2;
				  entity.Price3 = row.Price3;
				  entity.Price4 = row.Price4;
				  entity.Price5 = row.Price5;
				  entity.Photo1 = row.Photo1;
				  entity.Photo2 = row.Photo2;
				  entity.Photo3 = row.Photo3;
				  entity.Photo4 = row.Photo4;
				  entity.Photo5 = row.Photo5;
				  entity.Enable = row.Enable;
				  entity.CreateTime = row.CreateTime;
 
                //=============================================================================
                if (errorMessage.Length > 0)
                {
                    errors.Add(string.Format(
                        "第 {0} 列发现错误：{1}{2}",
                        rowIndex,
                        errorMessage,
                        "<br/>"));
                }
                list.Add(entity);
                rowIndex += 1;
            }
            if (errors.Count > 0)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        public virtual void SaveImportData(IEnumerable<Spl_WareDetailsModel> list)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    foreach (var model in list)
                    {
                        Spl_WareDetails entity = new Spl_WareDetails();
                       						entity.Id = ResultHelper.NewId;
						entity.Name = model.Name;
						entity.Code = model.Code;
						entity.BarCode = model.BarCode;
						entity.WareCategoryId = model.WareCategoryId;
						entity.Unit = model.Unit;
						entity.Lable = model.Lable;
						entity.BuyPrice = model.BuyPrice;
						entity.SalePrice = model.SalePrice;
						entity.RetailPrice = model.RetailPrice;
						entity.Remark = model.Remark;
						entity.Vender = model.Vender;
						entity.Brand = model.Brand;
						entity.Color = model.Color;
						entity.Material = model.Material;
						entity.Size = model.Size;
						entity.Weight = model.Weight;
						entity.ComeFrom = model.ComeFrom;
						entity.UpperLimit = model.UpperLimit;
						entity.LowerLimit = model.LowerLimit;
						entity.PrimeCost = model.PrimeCost;
						entity.Price1 = model.Price1;
						entity.Price2 = model.Price2;
						entity.Price3 = model.Price3;
						entity.Price4 = model.Price4;
						entity.Price5 = model.Price5;
						entity.Photo1 = model.Photo1;
						entity.Photo2 = model.Photo2;
						entity.Photo3 = model.Photo3;
						entity.Photo4 = model.Photo4;
						entity.Photo5 = model.Photo5;
						entity.Enable = model.Enable;
						entity.CreateTime = ResultHelper.NowTime;
 
                        db.Spl_WareDetails.Add(entity);
                    }
                    db.SaveChanges();
                }
            }
            catch(Exception ex)
            {
                throw;
            }
        }
		public virtual bool Check(ref ValidationErrors errors, object id,int flag)
        {
			return true;
		}

        public virtual bool IsExists(object id)
        {
            return m_Rep.IsExist(id);
        }
		
		public void Dispose()
        { 
            
        }

	}
}
