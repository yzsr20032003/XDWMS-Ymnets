//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Unity.Attributes;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using LinqToExcel;
using System.IO;
using System.Text;
using Apps.IDAL.Sys;
using Apps.Models.Sys;
using Apps.IBLL.Sys;
namespace Apps.BLL.Sys
{
	public partial class SysStructBLL: Virtual_SysStructBLL,ISysStructBLL
	{
		

	}
	public class Virtual_SysStructBLL
	{
		[Dependency]
		public ISysStructRepository m_Rep { get; set; }

		public virtual List<SysStructModel> GetList(ref GridPager pager, string queryStr)
		{

			IQueryable<SysStruct> queryData = null;
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(
								a=>a.Id.Contains(queryStr)
								|| a.Name.Contains(queryStr)
								|| a.ParentId.Contains(queryStr)
								
								|| a.Higher.Contains(queryStr)
								
								|| a.Remark.Contains(queryStr)
								
								);
			}
			else
			{
				queryData = m_Rep.GetList();
			}
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}

		public virtual List<SysStructModel> GetListByUserId(ref GridPager pager, string userId,string queryStr)
		{
			return new List<SysStructModel>();
		}
		
		public virtual List<SysStructModel> GetListByParentId(ref GridPager pager, string queryStr,object parentId)
		{
			return new List<SysStructModel>();
		}

		public virtual List<SysStructModel> CreateModelList(ref IQueryable<SysStruct> queryData)
		{

			List<SysStructModel> modelList = (from r in queryData
											  select new SysStructModel
											  {
													Id = r.Id,
													Name = r.Name,
													ParentId = r.ParentId,
													Sort = r.Sort,
													Higher = r.Higher,
													Enable = r.Enable,
													Remark = r.Remark,
													CreateTime = r.CreateTime,
		  
											  }).ToList();

			return modelList;
		}

		public virtual bool Create(ref ValidationErrors errors, SysStructModel model)
		{
			try
			{
				SysStruct entity = m_Rep.GetById(model.Id);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return false;
				}
				entity = new SysStruct();
							entity.Id = model.Id;
				entity.Name = model.Name;
				entity.ParentId = model.ParentId;
				entity.Sort = model.Sort;
				entity.Higher = model.Higher;
				entity.Enable = model.Enable;
				entity.Remark = model.Remark;
				entity.CreateTime = model.CreateTime;
  

				if (m_Rep.Create(entity))
				{
					return true;
				}
				else
				{
					errors.Add(Resource.InsertFail);
					return false;
				}
			}
			catch (Exception ex)
			{
				errors.Add(ex.Message);
				ExceptionHander.WriteException(ex);
				return false;
			}
		}



		 public virtual bool Delete(ref ValidationErrors errors, object id)
		{
			try
			{
				if (m_Rep.Delete(id) == 1)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch (Exception ex)
			{
				errors.Add(ex.Message);
				ExceptionHander.WriteException(ex);
				return false;
			}
		}

		public virtual bool Delete(ref ValidationErrors errors, object[] deleteCollection)
		{
			try
			{
				if (deleteCollection != null)
				{
					using (TransactionScope transactionScope = new TransactionScope())
					{
						if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
						{
							transactionScope.Complete();
							return true;
						}
						else
						{
							Transaction.Current.Rollback();
							return false;
						}
					}
				}
				return false;
			}
			catch (Exception ex)
			{
				errors.Add(ex.Message);
				ExceptionHander.WriteException(ex);
				return false;
			}
		}

		
	   

		public virtual bool Edit(ref ValidationErrors errors, SysStructModel model)
		{
			try
			{
				SysStruct entity = m_Rep.GetById(model.Id);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return false;
				}
											entity.Id = model.Id;
				entity.Name = model.Name;
				entity.ParentId = model.ParentId;
				entity.Sort = model.Sort;
				entity.Higher = model.Higher;
				entity.Enable = model.Enable;
				entity.Remark = model.Remark;
				entity.CreateTime = model.CreateTime;
 


				if (m_Rep.Edit(entity))
				{
					return true;
				}
				else
				{
					errors.Add(Resource.NoDataChange);
					return false;
				}

			}
			catch (Exception ex)
			{
				errors.Add(ex.Message);
				ExceptionHander.WriteException(ex);
				return false;
			}
		}

	  

		public virtual SysStructModel GetById(object id)
		{
			if (IsExists(id))
			{
				SysStruct entity = m_Rep.GetById(id);
				SysStructModel model = new SysStructModel();
											model.Id = entity.Id;
				model.Name = entity.Name;
				model.ParentId = entity.ParentId;
				model.Sort = entity.Sort;
				model.Higher = entity.Higher;
				model.Enable = entity.Enable;
				model.Remark = entity.Remark;
				model.CreateTime = entity.CreateTime;
 
				return model;
			}
			else
			{
				return null;
			}
		}


		 /// <summary>
		/// 校验Excel数据,这个方法一般用于重写校验逻辑
		/// </summary>
		public virtual bool CheckImportData(string fileName, List<SysStructModel> list,ref ValidationErrors errors )
		{
		  
			var targetFile = new FileInfo(fileName);

			if (!targetFile.Exists)
			{

				errors.Add("导入的数据文件不存在");
				return false;
			}

			var excelFile = new ExcelQueryFactory(fileName);

			//对应列头
							 excelFile.AddMapping<SysStructModel>(x => x.Name, "Name");
				 excelFile.AddMapping<SysStructModel>(x => x.ParentId, "ParentId");
				 excelFile.AddMapping<SysStructModel>(x => x.Sort, "Sort");
				 excelFile.AddMapping<SysStructModel>(x => x.Higher, "Higher");
				 excelFile.AddMapping<SysStructModel>(x => x.Enable, "Enable");
				 excelFile.AddMapping<SysStructModel>(x => x.Remark, "Remark");
				 excelFile.AddMapping<SysStructModel>(x => x.CreateTime, "CreateTime");
 
			//SheetName
			var excelContent = excelFile.Worksheet<SysStructModel>(0);
			int rowIndex = 1;
			//检查数据正确性
			foreach (var row in excelContent)
			{
				var errorMessage = new StringBuilder();
				var entity = new SysStructModel();
										  entity.Id = row.Id;
				  entity.Name = row.Name;
				  entity.ParentId = row.ParentId;
				  entity.Sort = row.Sort;
				  entity.Higher = row.Higher;
				  entity.Enable = row.Enable;
				  entity.Remark = row.Remark;
				  entity.CreateTime = row.CreateTime;
 
				//=============================================================================
				if (errorMessage.Length > 0)
				{
					errors.Add(string.Format(
						"第 {0} 列发现错误：{1}{2}",
						rowIndex,
						errorMessage,
						"<br/>"));
				}
				list.Add(entity);
				rowIndex += 1;
			}
			if (errors.Count > 0)
			{
				return false;
			}
			return true;
		}

		/// <summary>
		/// 保存数据
		/// </summary>
		public virtual void SaveImportData(IEnumerable<SysStructModel> list)
		{
			try
			{
				using (DBContainer db = new DBContainer())
				{
					foreach (var model in list)
					{
						SysStruct entity = new SysStruct();
											entity.Id = ResultHelper.NewId;
						entity.Name = model.Name;
						entity.ParentId = model.ParentId;
						entity.Sort = model.Sort;
						entity.Higher = model.Higher;
						entity.Enable = model.Enable;
						entity.Remark = model.Remark;
						entity.CreateTime = ResultHelper.NowTime;
 
						db.SysStruct.Add(entity);
					}
					db.SaveChanges();
				}
			}
			catch(Exception ex)
			{
				throw;
			}
		}
		public virtual bool Check(ref ValidationErrors errors, object id,int flag)
		{
			return true;
		}

		public virtual bool IsExists(object id)
		{
			return m_Rep.IsExist(id);
		}
		
		public void Dispose()
		{ 
			
		}

	}
}
