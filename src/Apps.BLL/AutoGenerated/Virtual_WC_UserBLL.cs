//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Unity.Attributes;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using LinqToExcel;
using System.IO;
using System.Text;
using Apps.IDAL.WC;
using Apps.Models.WC;
using Apps.IBLL.WC;
namespace Apps.BLL.WC
{
	public partial class WC_UserBLL: Virtual_WC_UserBLL,IWC_UserBLL
	{
        

	}
	public class Virtual_WC_UserBLL
	{
        [Dependency]
        public IWC_UserRepository m_Rep { get; set; }

		public virtual List<WC_UserModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<WC_User> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								a=>a.Id.Contains(queryStr)
								|| a.OpenId.Contains(queryStr)
								|| a.NickName.Contains(queryStr)
								
								|| a.Language.Contains(queryStr)
								|| a.City.Contains(queryStr)
								|| a.Province.Contains(queryStr)
								|| a.Country.Contains(queryStr)
								|| a.HeadImgUrl.Contains(queryStr)
								
								|| a.UnionId.Contains(queryStr)
								|| a.Remark.Contains(queryStr)
								|| a.GroupId.Contains(queryStr)
								|| a.TagidList.Contains(queryStr)
								
								|| a.OfficalAccountId.Contains(queryStr)
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }

		public virtual List<WC_UserModel> GetListByUserId(ref GridPager pager, string userId,string queryStr)
		{
			return new List<WC_UserModel>();
		}
		
		public virtual List<WC_UserModel> GetListByParentId(ref GridPager pager, string queryStr,object parentId)
        {
			return new List<WC_UserModel>();
		}

        public virtual List<WC_UserModel> CreateModelList(ref IQueryable<WC_User> queryData)
        {

            List<WC_UserModel> modelList = (from r in queryData
                                              select new WC_UserModel
                                              {
													Id = r.Id,
													OpenId = r.OpenId,
													NickName = r.NickName,
													Sex = r.Sex,
													Language = r.Language,
													City = r.City,
													Province = r.Province,
													Country = r.Country,
													HeadImgUrl = r.HeadImgUrl,
													SubscribeTime = r.SubscribeTime,
													UnionId = r.UnionId,
													Remark = r.Remark,
													GroupId = r.GroupId,
													TagidList = r.TagidList,
													Subscribe = r.Subscribe,
													OfficalAccountId = r.OfficalAccountId,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, WC_UserModel model)
        {
            try
            {
                WC_User entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new WC_User();
               				entity.Id = model.Id;
				entity.OpenId = model.OpenId;
				entity.NickName = model.NickName;
				entity.Sex = model.Sex;
				entity.Language = model.Language;
				entity.City = model.City;
				entity.Province = model.Province;
				entity.Country = model.Country;
				entity.HeadImgUrl = model.HeadImgUrl;
				entity.SubscribeTime = model.SubscribeTime;
				entity.UnionId = model.UnionId;
				entity.Remark = model.Remark;
				entity.GroupId = model.GroupId;
				entity.TagidList = model.TagidList;
				entity.Subscribe = model.Subscribe;
				entity.OfficalAccountId = model.OfficalAccountId;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, object id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, object[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, WC_UserModel model)
        {
            try
            {
                WC_User entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.Id = model.Id;
				entity.OpenId = model.OpenId;
				entity.NickName = model.NickName;
				entity.Sex = model.Sex;
				entity.Language = model.Language;
				entity.City = model.City;
				entity.Province = model.Province;
				entity.Country = model.Country;
				entity.HeadImgUrl = model.HeadImgUrl;
				entity.SubscribeTime = model.SubscribeTime;
				entity.UnionId = model.UnionId;
				entity.Remark = model.Remark;
				entity.GroupId = model.GroupId;
				entity.TagidList = model.TagidList;
				entity.Subscribe = model.Subscribe;
				entity.OfficalAccountId = model.OfficalAccountId;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual WC_UserModel GetById(object id)
        {
            if (IsExists(id))
            {
                WC_User entity = m_Rep.GetById(id);
                WC_UserModel model = new WC_UserModel();
                              				model.Id = entity.Id;
				model.OpenId = entity.OpenId;
				model.NickName = entity.NickName;
				model.Sex = entity.Sex;
				model.Language = entity.Language;
				model.City = entity.City;
				model.Province = entity.Province;
				model.Country = entity.Country;
				model.HeadImgUrl = entity.HeadImgUrl;
				model.SubscribeTime = entity.SubscribeTime;
				model.UnionId = entity.UnionId;
				model.Remark = entity.Remark;
				model.GroupId = entity.GroupId;
				model.TagidList = entity.TagidList;
				model.Subscribe = entity.Subscribe;
				model.OfficalAccountId = entity.OfficalAccountId;
 
                return model;
            }
            else
            {
                return null;
            }
        }


		 /// <summary>
        /// 校验Excel数据,这个方法一般用于重写校验逻辑
        /// </summary>
        public virtual bool CheckImportData(string fileName, List<WC_UserModel> list,ref ValidationErrors errors )
        {
          
            var targetFile = new FileInfo(fileName);

            if (!targetFile.Exists)
            {

                errors.Add("导入的数据文件不存在");
                return false;
            }

            var excelFile = new ExcelQueryFactory(fileName);

            //对应列头
			 				 excelFile.AddMapping<WC_UserModel>(x => x.OpenId, "OpenId");
				 excelFile.AddMapping<WC_UserModel>(x => x.NickName, "NickName");
				 excelFile.AddMapping<WC_UserModel>(x => x.Sex, "Sex");
				 excelFile.AddMapping<WC_UserModel>(x => x.Language, "Language");
				 excelFile.AddMapping<WC_UserModel>(x => x.City, "City");
				 excelFile.AddMapping<WC_UserModel>(x => x.Province, "Province");
				 excelFile.AddMapping<WC_UserModel>(x => x.Country, "Country");
				 excelFile.AddMapping<WC_UserModel>(x => x.HeadImgUrl, "HeadImgUrl");
				 excelFile.AddMapping<WC_UserModel>(x => x.SubscribeTime, "SubscribeTime");
				 excelFile.AddMapping<WC_UserModel>(x => x.UnionId, "UnionId");
				 excelFile.AddMapping<WC_UserModel>(x => x.Remark, "Remark");
				 excelFile.AddMapping<WC_UserModel>(x => x.GroupId, "GroupId");
				 excelFile.AddMapping<WC_UserModel>(x => x.TagidList, "TagidList");
				 excelFile.AddMapping<WC_UserModel>(x => x.Subscribe, "Subscribe");
				 excelFile.AddMapping<WC_UserModel>(x => x.OfficalAccountId, "OfficalAccountId");
 
            //SheetName
            var excelContent = excelFile.Worksheet<WC_UserModel>(0);
            int rowIndex = 1;
            //检查数据正确性
            foreach (var row in excelContent)
            {
                var errorMessage = new StringBuilder();
                var entity = new WC_UserModel();
						 				  entity.Id = row.Id;
				  entity.OpenId = row.OpenId;
				  entity.NickName = row.NickName;
				  entity.Sex = row.Sex;
				  entity.Language = row.Language;
				  entity.City = row.City;
				  entity.Province = row.Province;
				  entity.Country = row.Country;
				  entity.HeadImgUrl = row.HeadImgUrl;
				  entity.SubscribeTime = row.SubscribeTime;
				  entity.UnionId = row.UnionId;
				  entity.Remark = row.Remark;
				  entity.GroupId = row.GroupId;
				  entity.TagidList = row.TagidList;
				  entity.Subscribe = row.Subscribe;
				  entity.OfficalAccountId = row.OfficalAccountId;
 
                //=============================================================================
                if (errorMessage.Length > 0)
                {
                    errors.Add(string.Format(
                        "第 {0} 列发现错误：{1}{2}",
                        rowIndex,
                        errorMessage,
                        "<br/>"));
                }
                list.Add(entity);
                rowIndex += 1;
            }
            if (errors.Count > 0)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        public virtual void SaveImportData(IEnumerable<WC_UserModel> list)
        {
            try
            {
                using (DBContainer db = new DBContainer())
                {
                    foreach (var model in list)
                    {
                        WC_User entity = new WC_User();
                       						entity.Id = ResultHelper.NewId;
						entity.OpenId = model.OpenId;
						entity.NickName = model.NickName;
						entity.Sex = model.Sex;
						entity.Language = model.Language;
						entity.City = model.City;
						entity.Province = model.Province;
						entity.Country = model.Country;
						entity.HeadImgUrl = model.HeadImgUrl;
						entity.SubscribeTime = model.SubscribeTime;
						entity.UnionId = model.UnionId;
						entity.Remark = model.Remark;
						entity.GroupId = model.GroupId;
						entity.TagidList = model.TagidList;
						entity.Subscribe = model.Subscribe;
						entity.OfficalAccountId = model.OfficalAccountId;
 
                        db.WC_User.Add(entity);
                    }
                    db.SaveChanges();
                }
            }
            catch(Exception ex)
            {
                throw;
            }
        }
		public virtual bool Check(ref ValidationErrors errors, object id,int flag)
        {
			return true;
		}

        public virtual bool IsExists(object id)
        {
            return m_Rep.IsExist(id);
        }
		
		public void Dispose()
        { 
            
        }

	}
}
